[{"id":"content:0.index.md","path":"/","dir":"","title":"Home","description":"","keywords":[],"body":"     Easy solution to store files in your nuxt apps.   Be able to upload files from the frontend and recieve them from the backend to then save the files in your project.     Get files from   file input  and make them ready to send to backend  Serialize files in the backend to be able to use them appropriately  Store files in a specified location in your Nuxt backend with Nitro Engine       Independent Storage   Use your Nuxt app to independently store all the files you need from your users.    Handle File Inputs   You can use this module to cleanly handle file inputs.    Serialize Files in Backend   Get all the data you need from the files submitted even if you don't want to store them in your backend.   What's included  "},{"id":"content:1.introduction:1.getting-started.md","path":"/introduction/getting-started","dir":"introduction","title":"Getting Started","description":"Here is a simple guide to setting up Nuxt File Storage in your project.","keywords":["Play online","Add to your project"],"body":"  Getting Started  Here is a simple guide to setting up   Nuxt File Storage  in your project.  Play online  You can play with Nuxt File Storage in your browser using Stackblitz:  Play on StackBlitz  Add to your project   Go to your project and type in:     npx   nuxi@latest   module   add   nuxt-file-storage\n   add   nuxt-file-storage  to your modules:     export   default   defineNuxtConfig  ({\n       modules: [  'nuxt-file-storage'  ],\n   })\n   add the absolute   mount  location:      export   default   defineNuxtConfig  ({\n       modules: [  'nuxt-file-storage'  ],\n       fileStorage: {\n           mount: process.env.mount\n       },\n   })\n     mount='/home/$USR/development/your-nuxt-app/server/files'\n   You should definitely use Environment Variables   .env  instead of hard-coding your mount to differentiate between local development and deployment and to not expose your file system structure to your project.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.introduction:2.frontend-usage.md","path":"/introduction/frontend-usage","dir":"introduction","title":"Frontend Usage","description":"there are two ways to handle input and they are based on your usage with the files.","keywords":["1. Multipart Data Object","2. Base64 for JSON"],"body":"  Frontend Usage  there are two ways to handle input and they are based on your usage with the files.  1. Multipart Data Object  This method is the most optimal specifically for file uploading alone:     <  template  >\n       <  input   type  =  \"file\"   @  input  =  \"  handleFileInput  \"   />\n   </  template  >\n   \n   <  script   setup  >\n       const   {   handleFileInput  ,   files   }   =   useFileStorage  ()\n   </  script  >\n    handleFileInput  handles multiple files by default   files  will return a   formData  object that will be ready for upload  then you upload the files like this:     const   response   =   await   $fetch  (  '/api/files'  , {\n       method:   'POST'  ,\n       body: files\n     })\n  2. Base64 for JSON  this method is more optimal if you want to upload the files with more `json` data:     <  template  >\n       <  input   type  =  \"file\"   @  input  =  \"  handleJsonFileInput  \"   />\n   </  template  >\n   \n   <  script   setup  >\n       const   {   handleJsonFileInput  ,   jsonFiles   }   =   useFileStorage  ()\n   </  script  >\n  this method will allow you to upload the files in JSON form with other JSON data:     const   response   =   await   $fetch  (  '/api/files'  , {\n     method:   'POST'  ,\n     body: {\n       // other data\n       files: jsonFiles.value\n     }\n   })\n   this method is not the most recommended but is still applicable if really needed  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.introduction:3.backend-usage.md","path":"/introduction/backend-usage","dir":"introduction","title":"Backend Usage","description":"using Nitro Server Engine, we will make an api route that recieves the files and stores them in the folder userFiles","keywords":["Multipart Object Method","JSON Method"],"body":"  Backend Usage  using Nitro Server Engine, we will make an api route that recieves the files and stores them in the folder   userFiles  since we have two methods of uploading from the frontend there will be also two methods of handling the request from the backend  Multipart Object Method      export   default   defineNuxtConfig  ({\n       modules: [  'nuxt-file-storage'  ],\n       fileStorage: {\n           mount: process.env.mount\n       },\n   })\n     mount=/home/$USR/development/your-nuxt-app/server/files\n  JSON Method      export   default   defineEventHandler  (  async   (  event  )   =>   {\n       const   {   files   }   =   await   readBody  <{   files  :   File  [] }>(event)\n   \n           await   storeFileLocally  (\n               file,           // the file object\n               8  ,              // you can add a name for the file or length of Unique ID that will be automatically generated!\n               '/userFiles'    // the folder the file will be stored in\n           )\n   \n       return   'success!'\n   })\n   \n   interface   File   {\n       name  :   string\n       content  :   string\n   }\n     export   default   defineEventHandler  (  async   (  event  )   =>   {\n     const   {   files   }   =   await   readBody  <{   files  :   File  [] }>(event)\n     \n     for   (   const   file   of   files ) {\n       await   storeFileLocally  (\n         file,           // the file object\n         8  ,              // you can add a name for the file or length of Unique ID that will be automatically generated!\n         '/userFiles'    // the folder the file will be stored in\n       )\n     }\n   \n       return   'success!'\n   })\n   \n   interface   File   {\n       name  :   string\n       content  :   string\n   }\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.introduction:4.configuration.md","path":"/introduction/configuration","dir":"introduction","title":"Configuration","description":"Learn how to configure Docus.","keywords":["Customizing the logo"],"body":"  Configuration  Learn how to configure Docus.      export   default   defineAppConfig  ({\n     docus: {\n       title:   'Docus'  ,\n       description:   'My Docus Project'  ,\n       url:   'http://docus.dev'\n     }\n   })\n     export   default   defineAppConfig  ({\n     docus: {\n       title:   'Docus'  ,\n       description:   'My Docus Project'  ,\n       url:   'http://docus.dev'  ,\n       image:   '/social-card-preview.png'  ,\n       socials: {\n         twitter:   '@nuxt_js'  ,\n         github:   'nuxt-themes/docus'  ,\n       },\n       github: {\n         root:   'content'  ,\n         edit:   true  ,\n         contributors:   false\n       },\n       layout:   'default'  ,\n       aside: {\n         level:   1  ,\n         filter: [],\n       },\n       header: {\n         title:   false  ,\n         logo:   true  ,\n         showLinkIcon:   false\n       },\n       footer: {\n         credits: {\n           icon:   'IconDocus'  ,\n           text:   'Powered by Docus'  ,\n           href:   'https://docus.dev'  ,\n         },\n         textLinks: [\n           {\n             text:   'Nuxt'  ,\n             href:   'https://nuxt.com'  ,\n             target:   '_blank'  ,\n             rel:   'noopener'\n           }\n         ],\n         iconLinks: [\n           {\n             label:   'NuxtJS'  ,\n             href:   'https://nuxtjs.org'  ,\n             component:   'IconNuxtLabs'  ,\n           },\n           {\n             label:   'Vue Telescope'  ,\n             href:   'https://vuetelescope.com'  ,\n             component:   'IconVueTelescope'  ,\n           },\n         ],\n       }\n     }\n   })\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      Key   Type   Default   Description     title   string  Docus  Website title    titleTemplate   string  Docus  Website title template    description   string  My Docus Project  Website description    url   string   Website URL    layout   string  default  Fallback layout to use (supports  default  or   page )    Socials       socials   object   {}  Social links    socials.github   string   The repository to use on GitHub links    socials.twitter   string   The account to use on Twitter links    socials.youtube   string   The channel to use on Youtube links    socials.instagram   string   The account to use on Instagram links    socials.facebook   string   The account to use on Facebook links    socials.medium   string   The account to use on Medium links    socials.[social]   object   Override social or display custom one    socials.[social].label   string   A label to use for the social    socials.[social].icon   string   A icon to use for the social    socials.[social].href   string   A link to use for the social    socials.[social].rel   string   noopener noreferrer  A space-separated list of  link types    Header       header   object   Header configuration    header.logo   boolean   Whether or not to use  Logo.vue  as the header logo    header.title   string   If set to a string, will be used in the header    header.showLinkIcon   boolean   If set to  true  links icons will show in the header    header.exclude   string[]   An array of path to exclude out from the header navigation    header.fluid   boolean   true  Make header  Container  fluid    Main       main   object   Main configuration    main.fluid   boolean   true  Make main content  Container  fluid    main.padded   boolean   true  Make main content  Container  padded    Aside       aside   object   Aside configuration    aside.level   string  0  Aside base level of nesting    aside.collapsed   boolean   Will be used as default value for collapsible navigation categories    aside.exclude   string[]   An array of path to exclude out from the aside navigation    Footer       footer   object   Footer configuration    footer.credits   object   An object defining the bottom left credits    footer.credits.icon   object   The icon to use for the credits    footer.credits.text   object   The text to use for the credits    footer.textLinks   array   []  An array of texts to display at the center of footer    footer.textLinks[0].text   string   The text to display    footer.textLinks[0].href   string   A link to use for the text    footer.textLinks[0].target   string   _self  Where to display the linked URL, as the name for a browsing context    footer.textLinks[0].rel   string   noopener noreferrer  A space-separated list of  link types    footer.iconLinks   array   []  An array of icons to display in the footer    footer.iconLinks[0].label   string   A label to use for the icon    footer.iconLinks[0].href   string   A link to use for the icon    footer.iconLinks[0].icon   string   The icon to use (can be a component name)    footer.iconLinks[0].rel   string   noopener noreferrer  A space-separated list of  link types    footer.fluid   boolean   true  Make footer  Container  fluid    GitHub       github   object   false  GitHub integration configuration    github.dir   string   Directory containing the files to be edited    github.branch   string   Branch to start editing    github.repo   string   Name of the GitHub repo to edit files    github.owner   string   Owner of the repo    github.edit   boolean   Toggle \"Edit this page on Github\" component on documentation pages    Search       fuse   object   useFuse  options  Customizing the logo  To update the logo in the header, create a component in   components/Logo.vue  with your own logo.  In this example, the image is located at   /public/img .     <  template  >\n     <  img   width  =  \"120\"   src  =  \"/img/YOURLOGO.png\"  />\n   </  template  >\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:2.api:1.components.md","path":"/api/components","dir":"api","title":"Components","description":"Discover every component you can use in your content.","keywords":["<Alert />","<Badge />","<BlockHero />","<ButtonLink />","<Callout />","<Card />","<CardGrid />","<CodeGroup />","<CodeBlock />","<CopyButton />","<Icon />","<List />","<Sandbox />","<Terminal />","<VideoPlayer />"],"body":"  Components  Discover every component you can use in your content.   <Alert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}\n   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"success\"}\n   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"warning\"}\n   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"danger\"}\n   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n     <Badge />   <Badge />  support same types as   <Alert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]\n   \n   :badge[  Deprecated  ]{type=\"warning\"}\n   \n   ::badge{type=\"danger\"}\n   Not found!\n   ::\n     <BlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero\n   ---\n   cta:\n     -   Get started\n     -   /get-started\n   secondary:\n     -   Open on GitHub →\n     -   https://github.com/nuxtlabs/docus\n   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n   \n   #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::\n     <ButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}\n     <Callout />   <Callout />  support same types as   <Alert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n    \n   ::callout{type=\"warning\"}\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n     <Card />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}\n    #title\n    Nuxt Architecture.\n    #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br\n    Use Nuxt to build a static site, or a serverless app.\n    ::\n     <CardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid\n   #title\n   What's included\n   \n   #root\n   :ellipsis\n   \n   #default\n     ::card\n     #title\n     Nuxt Architecture.\n     #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::card\n     #title\n     Vue Components.\n     #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::card\n     #title\n     Write Markdown.\n     #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::\n     <CodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add   docus\n     npm   install   docus\n     ::code-group\n     ```bash [Yarn]\n     yarn   add   docus\n     ```\n     ```bash [NPM]\n     npm   install   docus\n     ```\n   ::\n     <CodeBlock />  To be used inside a   <CodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `<CodeGroup />`   */\n   \n   ::code-block{label=\"Preview\" preview}\n     ::badge\n     Hello World!\n     ::\n   ::\n     <CopyButton />        :copy-button{content=\"hey!\"}\n     <Icon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}\n   :icon{name=\"logos:vue\"}\n   :icon{name=\"logos:nuxt-icon\"}\n     <List />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}\n   -   **Important**\n   -   Always\n   ::\n   \n   ::list{type=\"success\"}\n   -   Amazing\n   -   Congrats\n   ::\n   \n   ::list{type=\"info\"}\n   -   Do you know?\n   -   You can also do this\n   ::\n   \n   ::list{type=\"warning\"}\n   -   Be careful\n   -   Use with precautions\n   ::\n   \n   ::list{type=\"danger\"}\n   -   Drinking too much\n   -   Driving drunk\n   ::\n    <Sandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}\n     <Terminal />        :terminal{content=\"nuxi build\"}\n     <VideoPlayer />         ::div\n     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::\n   html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:2.api:2.composables.md","path":"/api/composables","dir":"api","title":"Composables","description":"Discover the Docus composables to use in your custom Vue components and pages.","keywords":["useDocus()","useMenu()","useScrollspy()"],"body":"  Composables  Discover the Docus composables to use in your custom Vue components and pages.   useDocus()    useDocus  ()  gives access to docus runtime config, all default values and your custom config from   app.config.ts    config  refers to the merged config of the current page.   main ,   header ,   aside ,   footer  and   titleTemplate  can be set from   _dir.yml  and any   page.md  file.  The configs in   app.config  file will be used as defaults.     <  script   setup  >\n   const   {   config   }   =   useDocus  ()\n   </  script  >\n   \n   <  template  >\n     <  div  >\n       <  h1  >{{ config.title }}</  h1  >\n       <  p  >{{ config.description }}</  p  >\n     </  div  >\n   </  template  >\n    tree  refers to the current navigation tree that is displayed in the   aside  component.     <  script   setup  >\n   const   {   tree   }   =   useDocus  ()\n   </  script  >\n   \n   <  template  >\n     <  DocsAsideTree   :  links  =  \"  tree  \"   />\n   </  template  >\n    useMenu()   useMenu()  gives access to   $menu  plugin controlling mobile navigation globally.     const   {\n     // Is menu visible\n     visible  ,\n     // Close menu function\n     close  ,\n     // Open menu function\n     open  ,\n     // Toggle menu function\n     toggle\n   }   =   useMenu  ()\n    useScrollspy()   useScrollspy()  is used in   docs  layout to make the ToC display the currently visible headings.     const   {\n     // Headings on the page\n     visibleHeadings  ,\n     // Active headings (for the current page)\n     activeHeadings  ,\n     // Update headings (an array of DOM nodes)\n     updateHeadings\n   }   =   useScrollspy  ()\n   html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:2.api:3.layouts.md","path":"/api/layouts","dir":"api","title":"Layouts","description":"Docus provides multiple built-in layouts for displaying your Markdown pages.","keywords":["default","page"],"body":"  Layouts  Docus provides multiple built-in layouts for displaying your Markdown pages.   default  The default layout for every page created in the project. This layout renders multiple section alongside the content:   Aside navigation menu (togglable with   aside: false/true )  Page bottom section (togglable with   bottom: false/true )  Table of content (togglable with   toc: false/true )     ---\n   aside: true\n   bottom: true\n   toc: false\n   ---\n   \n   Your awesome content\n  Current page is live sample of default layout.   page   page  layout is content focused layout. This layout does not render aside menu of table of contents.  This layout accept some configuration from content front-matter.    fluid : By setting   fluid: true  in content front-matter the content will be rendered in full width.   constrainedClass : Using this option you can modify layout container look. Like constraining layout width of changing the background.   padded : Setting   padded: true  in front-matter will add horizontal padding in the layout.     ---\n   title: Home\n   layout: page\n   fluid: true\n   ---\n  Check   Home page  as live sample of page layout  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"}]